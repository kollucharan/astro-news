---
import ArrowLeftDouble from "@/assets/svgs/arrow-left-double.astro";
import ArrowRightDouble from "@/assets/svgs/arrow-right-double.astro";
import ArrowLeft01 from "@/assets/svgs/arrow-left-01.astro";
import ArrowRight01 from "@/assets/svgs/arrow-right-01.astro";

type Props = {
  length: number;                 // total pages
  currentPage: number;            // 1-based
  baseUrl: string;                // e.g. "/articles/page"
  prevUrl?: string;
  nextUrl?: string;
  lastUrl: string;
};

const { length, currentPage, baseUrl, prevUrl, nextUrl, lastUrl } = Astro.props;

// how many numbered buttons to show at once
const maxVisibleButtons = 4;

// normalize base: leading slash, no trailing slash
const normalizeBase = (s: string) => {
  const withLead = s.startsWith("/") ? s : `/${s}`;
  return withLead.endsWith("/") ? withLead.slice(0, -1) : withLead;
};
const root = normalizeBase(baseUrl);

// compute visible page window
const startPage = Math.max(1, currentPage - Math.floor(maxVisibleButtons / 2));
const endPage = Math.min(length, startPage + maxVisibleButtons - 1);
const adjustedStartPage = Math.max(1, endPage - maxVisibleButtons + 1);

// [adjustedStartPage .. endPage]
const paginationList = Array.from(
  { length: endPage - adjustedStartPage + 1 },
  (_, i) => adjustedStartPage + i
);

// ALWAYS include the page number (even for page 1)
const hrefFor = (p: number) => `${root}/${p}`;
---

<section
  class:list={[
    "flex items-center mx-auto mt-8",
    !prevUrl && !nextUrl ? "hidden" : "",   // hide bar if only one page
  ]}
>
  <nav class="join">
    {currentPage === 1 ? (
      <span class="join-item btn btn-sm btn-disabled" aria-label="First page">
        <ArrowLeftDouble />
      </span>
    ) : (
      <a href={hrefFor(1)} class="join-item btn btn-sm" aria-label="First page">
        <ArrowLeftDouble />
      </a>
    )}

    {prevUrl ? (
      <a href={prevUrl} class="join-item btn btn-sm">
        <ArrowLeft01 /> <span class="hidden lg:block">Previous</span>
      </a>
    ) : (
      <span class="join-item btn btn-sm btn-disabled">
        <ArrowLeft01 /> <span class="hidden lg:block">Previous</span>
      </span>
    )}

    {paginationList.map((num) => {
      const href = hrefFor(num);
      const isCurrent = currentPage === num;
      return isCurrent ? (
        <span
          class="join-item btn btn-sm btn-active pointer-events-none"
          aria-current="page"
        >
          {num}
        </span>
      ) : (
        <a href={href} class="join-item btn btn-sm">
          {num}
        </a>
      );
    })}

    {nextUrl ? (
      <a href={nextUrl} class="join-item btn btn-sm">
        <span class="hidden lg:block">Next</span> <ArrowRight01 />
      </a>
    ) : (
      <span class="join-item btn btn-sm btn-disabled">
        <span class="hidden lg:block">Next</span> <ArrowRight01 />
      </span>
    )}

    {currentPage === length ? (
      <span class="join-item btn btn-sm btn-disabled" aria-label="Last page">
        <ArrowRightDouble />
      </span>
    ) : (
      <a href={lastUrl} class="join-item btn btn-sm" aria-label="Last page">
        <ArrowRightDouble />
      </a>
    )}
  </nav>
</section>

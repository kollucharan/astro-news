---
import { getAllCategories, getCategoryBySlug } from "@/lib/fetchCategories";
import ListLayout from "@/layouts/list.astro";
import Pagination from "@/components/shared/pagination.astro";
import WideCard from "@/components/cards/wideCard.astro";
import { SITE } from "@/lib/config";

export async function getStaticPaths() {
  const categories = await getAllCategories();
  const pageSize = SITE.postsPerPage;
  const paths = [];

  for (const category of categories) {
    const numArticles = category.articles?.length ?? 0;
    const numPages = Math.max(1, Math.ceil(numArticles / pageSize));
    
    for (let page = 1; page <= numPages; page++) {
      paths.push({
        params: {
          category: category.slug.current,
          page: page.toString(),
        },
        props: {
          categorySlug: category.slug.current,
          pageNumber: page,
          totalArticles: numArticles,
        },
      });
    }
  }

  return paths;
}

const { categorySlug, pageNumber, totalArticles } = Astro.props;
const categoryData = await getCategoryBySlug(categorySlug);

if (!categoryData) {
  return Astro.redirect("/404");
}

// Pagination logic
const pageSize = SITE.postsPerPage;
const startIndex = (pageNumber - 1) * pageSize;
const endIndex = startIndex + pageSize;
const articles = categoryData.articles?.slice(startIndex, endIndex) ?? [];
const totalPages = Math.ceil(totalArticles / pageSize);

const entry = {
  title: categoryData.title,
  description: categoryData.description ?? "",
};
---

<ListLayout header={categoryData.title} entry={entry}>
  <ul class="flex flex-col gap-2 flex-1">
    {articles.map((article, index) => (
      <WideCard
        article={article}
        isLast={index === articles.length - 1}
      />
    ))}
  </ul>
  {totalPages > 1 && (
    <Pagination
      length={totalPages}
      currentPage={pageNumber}
      baseUrl={`/categories/${categorySlug}`}
      // Add other pagination props as needed
    />
  )}
</ListLayout>
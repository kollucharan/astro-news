---
export const prerender = false;

import { getAuthorBySlug } from "@/lib/fetchAuthors";
import ListLayout from "@/layouts/list.astro";
import WideCard from "@/components/cards/wideCard.astro";
import Pagination from "@/components/shared/pagination.astro";
import { SITE } from "@/lib/config";

const { id, page } = Astro.params;
if (!id) return Astro.redirect("/404");

const authorData = await getAuthorBySlug(id); // accepts slug.current or _id (your query)
if (!authorData) return Astro.redirect("/404");

// Pagination
const currentPage = Math.max(1, Number(page || 1));
const pageSize = SITE.postsPerPage || 10;
const all = authorData.articles ?? [];
const lastPage = Math.max(1, Math.ceil(all.length / pageSize));
const safePage = Math.min(currentPage, lastPage);

const start = (safePage - 1) * pageSize;
const end = start + pageSize;
const articles = all.slice(start, end);

// Build URLs using the original :id from the route (works with slug or _id)
const baseUrl = `/authors/${id}`;
const prevUrl = safePage > 1 ? `${baseUrl}/${safePage - 1}` : undefined;
const nextUrl = safePage < lastPage ? `${baseUrl}/${safePage + 1}` : undefined;

const entry = {
  title: `${authorData.name}'s Articles`,
  description: `Articles written by ${authorData.name}`,
};
---

<ListLayout header={`${authorData.name}'s Articles`} entry={entry}>
  <section class="flex-1">
    <ul class="flex flex-col gap-4">
      {articles.map((article, index) => (
        <WideCard article={article} isLast={index === articles.length - 1} />
      ))}
    </ul>
  </section>

  {lastPage > 1 && (
    <Pagination
      length={lastPage}
      currentUrl={`${baseUrl}/${safePage}`}
      currentPage={safePage}
      baseUrl={baseUrl}
      prevUrl={prevUrl}
      nextUrl={nextUrl}
      lastUrl={`${baseUrl}/${lastPage}`}
    />
  )}
</ListLayout>
